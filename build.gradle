plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'version-catalog'
    id 'maven-publish'
}

def isBranch = project.hasProperty('branch')
def isMainBranch = isBranch && (project.getProperty('branch') == 'master' || project.getProperty('branch') == 'main')
def isRelease = project.findProperty('release') == 'true'
ext {
    versionSuffix = (isBranch && !isMainBranch && !isRelease ? ('-' + project.getProperty('branch')) : '') + (!isRelease ? '-SNAPSHOT' : '')
}

group = 'de.interactive_instruments'

version = '5.4.0' + versionSuffix

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

sourceSets {
    annotations {
        java {
            srcDir 'src/annotations/java'
        }
    }
}

java {
    registerFeature('annotations') {
        usingSourceSet(sourceSets.annotations)
    }
}

sourceCompatibility = JavaVersion.VERSION_11

dependencies {
    implementation 'gradle.plugin.org.jetbrains.gradle.plugin.idea-ext:gradle-idea-ext:1.1.7'
    implementation 'com.github.spotbugs.snom:spotbugs-gradle-plugin:5.0.6'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'com.google.gradle:osdetector-gradle-plugin:1.7.0'
    implementation 'org.cyclonedx:cyclonedx-gradle-plugin:1.8.1'
}

gradlePlugin {
    plugins {
        layerPlugin {
            id = 'de.interactive_instruments.xtraplatform-layer'
            implementationClass = 'de.interactive_instruments.xtraplatform.LayerPlugin'
        }
        applicationPlugin {
            id = 'de.interactive_instruments.xtraplatform-application'
            implementationClass = 'de.interactive_instruments.xtraplatform.ApplicationPlugin'
        }
        modulePlugin {
            id = 'de.interactive_instruments.xtraplatform-module'
            implementationClass = 'de.interactive_instruments.xtraplatform.ModulePlugin'
        }
        docPlugin {
            id = 'de.interactive_instruments.xtraplatform-doc'
            implementationClass = 'de.interactive_instruments.xtraplatform.docs.DocPlugin'
        }
        compositePlugin {
            id = 'de.interactive_instruments.xtraplatform-composite'
            implementationClass = 'de.interactive_instruments.xtraplatform.CompositePlugin'
        }
    }
}


def libz = rootProject.extensions
        .getByType(VersionCatalogsExtension).named("libs")

catalog {
    versionCatalog {
        libz.getVersionAliases().each {
            version(it, "${libz.findVersion(it).get().displayName}")
        }
        libz.getPluginAliases().each {
            plugin(it, "${libz.findPlugin(it).get().get().pluginId}").versionRef("${it}")
        }
        libz.getLibraryAliases().each {
            def versionRef = libz.getVersionAliases().find {alias -> it == alias } ?: libz.getVersionAliases().find {alias -> it.startsWith(alias) }
            library(it, "${libz.findLibrary(it).get().get().group}", "${libz.findLibrary(it).get().get().name}").versionRef(versionRef)
        }
        libz.getBundleAliases().each {
            def libRefs = libz.findBundle(it).get().get().collect {dep ->
                def name = dep.name.replaceAll("-", ".")
                libz.getLibraryAliases().find {alias -> name == alias } ?: libz.getVersionAliases().find {alias -> name.startsWith(alias) } ?: libz.getVersionAliases().find {alias -> dep.group.endsWith(alias) }
            }
            bundle(it, libRefs)
        }
    }
}

publishing {
    repositories {
        maven {
            def releasesRepoUrl = "https://dl.interactive-instruments.de/repository/maven-releases/"
            def snapshotsRepoUrl = "https://dl.interactive-instruments.de/repository/maven-snapshots/"

            url version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username project.findProperty('deployUser') ?: ''
                password project.findProperty('deployPassword') ?: ''
            }
        }
    }
    publications {
        catalog(MavenPublication) {
            artifactId = 'xtraplatform-catalog'
            from components.versionCatalog
        }
    }
}

